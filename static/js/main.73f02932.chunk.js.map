{"version":3,"sources":["stores/user.js","language/i18n/es.js","language/i18n/en.js","stores/language.js","stores/ui.js","components/language/language.jsx","components/header/header.jsx","components/button/button.jsx","components/user/user.jsx","containers/app.jsx","registerServiceWorker.js","index.js"],"names":["UserStore","types","model","id","identifier","name","string","lastName","age","number","xp","views","self","fullName","concat","actions","changeName","changeLastName","increaseXp","amount","RESOURCES","CHANGE_SPANISH","CHANGE_ENGLISH","CHANGE_KOREAN","USER_TITLE","XP_TITLE","AGE_TITLE","APP_DESCRIPTION","ACTIONS","INCREASE_XP","CHANGE_NAME","CHANGE_LASTNAME","LanguageStore","language","currentLanguage","resource","enUS","esES","changeLanguageTo","UIStore","borderRadius","textColor","changeBorderRadius","value","changeTextColor","inject","observer","_ref","indexOf","react_default","a","createElement","split","className","onClick","language_language","Button","styled","button","_templateObject","props","radius","color","user","ui","style","button_button","App","mobx_react_devtools_default","header_header","user_user","navigator","window","addEventListener","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","store","create","router","index_module","es","exact","path","component","render","document","getElementById"],"mappings":"wPAmCeA,EAzBGC,IACfC,MAAM,YAAa,CAClBC,GAAIF,IAAMG,WACVC,KAAMJ,IAAMK,OACZC,SAAUN,IAAMK,OAChBE,IAAKP,IAAMQ,OACXC,GAAIT,IAAMQ,SAEXE,MAAM,SAAAC,GAAI,MAAK,CACdC,eACE,SAAAC,OAAUF,EAAKP,KAAf,KAAAS,OAAuBF,EAAKL,cAG/BQ,QAAQ,SAAAH,GAAI,MAAK,CAChBI,WADgB,SACLX,GACTO,EAAKP,KAAOA,GAEdY,eAJgB,SAIDV,GACbK,EAAKL,SAAWA,GAElBW,WAPgB,SAOLC,GACTP,EAAKF,IAAMS,MCfFC,EAfG,CAChBC,eAAgB,uBAChBC,eAAgB,sBAChBC,cAAe,oBACfC,WAAY,UACZC,SAAU,cACVC,UAAW,MACXC,gBAAiB,sEACjBC,QAAS,CACPC,YAAa,oCACbC,YAAa,oBACbC,gBAAiB,wBCINX,EAfG,CAChBC,eAAgB,oBAChBC,eAAgB,oBAChBC,cAAe,mBACfC,WAAY,OACZC,SAAU,aACVC,UAAW,MACXC,gBAAiB,wEACjBC,QAAS,CACPC,YAAa,8BACbC,YAAa,kBACbC,gBAAiB,yBCkBNC,EAzBO/B,IACnBC,MAAM,gBAAiB,CACtB+B,SAAUhC,IAAMK,SAEjBK,MAAM,SAAAC,GAAI,MAAK,CACdsB,sBACE,OAAOtB,EAAKqB,UAEdE,eACE,OAAQvB,EAAKqB,UACX,IAAK,KACH,OAAOG,EACT,IAAK,KACH,OAAOC,EACT,QACE,OAAOD,OAIdrB,QAAQ,SAAAH,GAAI,MAAK,CAChB0B,iBADgB,SACCL,GACfrB,EAAKqB,SAAWA,MCTPM,EAfCtC,IACbC,MAAM,UAAW,CAChBsC,aAAcvC,IAAMQ,OACpBgC,UAAWxC,IAAMK,SAElBK,MAAM,SAAAC,GAAI,MAAK,KACfG,QAAQ,SAAAH,GAAI,MAAK,CAChB8B,mBADgB,SACGC,GACjB/B,EAAK4B,aAAeG,GAEtBC,gBAJgB,SAIAD,GACd/B,EAAK6B,UAAYE,uBCJRE,mBAAO,WAAPA,CAAmBC,mBANjB,SAAAC,GAAA,IAAGd,EAAHc,EAAGd,SAAUE,EAAbY,EAAaZ,SAAb,OAAuD,IAA3BA,EAASa,QAAQ,KAC1DC,EAAAC,EAAAC,cAAA,YACGlB,EAASE,SAASA,EAASiB,MAAM,KAAK,IAAIjB,EAASiB,MAAM,KAAK,KAEjEH,EAAAC,EAAAC,cAAA,YAAOlB,EAASE,SAASA,OCqBdU,0BAAO,WAAPA,CAAmBC,mBArBnB,SAAAC,GAAA,IAAGd,EAAHc,EAAGd,SAAH,OACbgB,EAAAC,EAAAC,cAAA,OAAKhD,GAAG,UACN8C,EAAAC,EAAAC,cAAA,OACEE,UAC+B,OAA7BpB,EAASC,gBAA2B,kBAAoB,UAE1DoB,QAAS,kBAAMrB,EAASK,iBAAiB,QAEzCW,EAAAC,EAAAC,cAACI,EAAD,CAAUpB,SAAS,oBAErBc,EAAAC,EAAAC,cAAA,OACEE,UAC+B,OAA7BpB,EAASC,gBAA2B,kBAAoB,UAE1DoB,QAAS,kBAAMrB,EAASK,iBAAiB,QAEzCW,EAAAC,EAAAC,cAACI,EAAD,CAAUpB,SAAS,gkBCrBzB,IAmBeqB,QAnBAC,EAAOC,OAAVC,IAEO,SAAAC,GAAK,OAAIA,EAAMC,QAGvB,SAAAD,GAAK,OAAKA,EAAME,MAAQF,EAAME,MAAQ,UCoDlCjB,0BAAO,OAAQ,KAAfA,CAAqBC,mBAlDvB,SAAAC,GAAA,IAAGgB,EAAHhB,EAAGgB,KAAMC,EAATjB,EAASiB,GAAT,OACXf,EAAAC,EAAAC,cAAA,OAAKhD,GAAG,QACN8C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACZU,EAAKlD,SADR,KACmBoC,EAAAC,EAAAC,cAAA,aAAQY,EAAKvD,MAEhCyC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,MACbJ,EAAAC,EAAAC,cAACI,EAAD,CAAUpB,SAAS,aADrB,QAGEc,EAAAC,EAAAC,cAAA,QAAMc,MAAO,CAAEH,MAAOC,EAAKrD,IAAM,IAAO,UAAY,YACjDqD,EAAKrD,KAGVuC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAACI,EAAD,CAAUpB,SAAS,uBAIzBc,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAACe,EAAD,CAAQL,OAAQG,EAAGxB,aAAcc,QAAS,kBAAMS,EAAK7C,WAAW,OAC9D+B,EAAAC,EAAAC,cAACI,EAAD,CAAUpB,SAAS,yBAErBc,EAAAC,EAAAC,cAACe,EAAD,CACEL,OAAQG,EAAGxB,aACXsB,MAAOE,EAAGvB,UACVa,QAAS,kBAAMS,EAAK/C,WAAW,UAE/BiC,EAAAC,EAAAC,cAACI,EAAD,CAAUpB,SAAS,yBAErBc,EAAAC,EAAAC,cAACe,EAAD,CACEL,OAAQG,EAAGxB,aACXsB,MAAOE,EAAGvB,UACVa,QAAS,kBAAMS,EAAK9C,eAAe,SAEnCgC,EAAAC,EAAAC,cAACI,EAAD,CAAUpB,SAAS,6BAErBc,EAAAC,EAAAC,cAACe,EAAD,CACEL,OAAQG,EAAGxB,aACXsB,MAAOE,EAAGvB,UACVa,QAAS,kBAAMU,EAAGtB,mBAAmB,MAHvC,yBAKyBsB,EAAGxB,qBCnCrB2B,SARH,kBACVlB,EAAAC,EAAAC,cAAA,OAAKhD,GAAG,OACN8C,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,MACAD,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACmB,EAAD,SCF2C,kBAAmBC,WAC9DC,OAAOC,iBAAiB,OAAQ,WAC9B,IAAMC,EAAK,GAAA5D,OAAM6D,kCAAN,sBACXJ,UAAUK,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfb,UAAUK,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,OCpBrE,IAUMC,EAAQ,CACZ3B,KAXgB/D,EAAU2F,OAAO,CACjCxF,GAAI,IACJE,KAAM,OACNE,SAAU,WACVC,IAAK,GACLE,GAAI,IAOJuB,SALoBD,EAAc2D,OAAO,CAAE1D,SAAU,OAMrD+B,GALczB,EAAQoD,OAAO,CAAEnD,aAAc,EAAGC,UAAW,WAQvDmD,EACJ3C,EAAAC,EAAAC,cAAC0C,EAAA,SAAaH,EACZzC,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACE7C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,MAKvC+B,iBAAON,EAAQO,SAASC,eAAe","file":"static/js/main.73f02932.chunk.js","sourcesContent":["import { types } from 'mobx-state-tree';\n\n/**\n * Mobx State Tree Store\n * The store recieves 3 parameters\n *  1st one is the Store Name\n *  2nd is an object with the Props and Computed values\n *  3rd is and object with the Actions\n **/\n\nconst UserStore = types\n  .model('UserStore', {\n    id: types.identifier,\n    name: types.string,\n    lastName: types.string,\n    age: types.number,\n    xp: types.number\n  })\n  .views(self => ({\n    get fullName() {\n      return `${self.name} ${self.lastName}`;\n    }\n  }))\n  .actions(self => ({\n    changeName(name) {\n      self.name = name;\n    },\n    changeLastName(lastName) {\n      self.lastName = lastName;\n    },\n    increaseXp(amount) {\n      self.xp += amount;\n    }\n  }));\n\nexport default UserStore;\n","// SPANISH LANGUAGE RESOURCES\nconst RESOURCES = {\n  CHANGE_SPANISH: 'Cambiar a Español',\n  CHANGE_ENGLISH: 'Cambiar a Inglés',\n  CHANGE_KOREAN: 'Cambiar a Coreano',\n  USER_TITLE: 'Usuario',\n  XP_TITLE: 'Experiencia',\n  AGE_TITLE: 'Age',\n  APP_DESCRIPTION: 'React Create App con React Router y MobX e Internacionalización.',\n  ACTIONS: {\n    INCREASE_XP: 'Incrementa Puntos de Experiencia!',\n    CHANGE_NAME: 'Cambia mi nombre!',\n    CHANGE_LASTNAME: 'Cambia mi apellido!'\n  }\n};\n\nexport default RESOURCES;\n","// ENGLISH LANGUAGE RESOURCES\nconst RESOURCES = {\n  CHANGE_SPANISH: 'Change to Spanish',\n  CHANGE_ENGLISH: 'Change to English',\n  CHANGE_KOREAN: 'Change to Korean',\n  USER_TITLE: 'User',\n  XP_TITLE: 'Experience',\n  AGE_TITLE: 'Age',\n  APP_DESCRIPTION: 'React Create App with React Router and MobX and Internationalization.',\n  ACTIONS: {\n    INCREASE_XP: 'Increase Experience Points!',\n    CHANGE_NAME: 'Change My Name!',\n    CHANGE_LASTNAME: 'Change My Last Name!'\n  }\n};\n\nexport default RESOURCES;\n","import { types } from 'mobx-state-tree';\n\nimport esES from '../language/i18n/es';\nimport enUS from '../language/i18n/en';\n\nconst LanguageStore = types\n  .model('LanguageStore', {\n    language: types.string\n  })\n  .views(self => ({\n    get currentLanguage() {\n      return self.language;\n    },\n    get resource() {\n      switch (self.language) {\n        case 'en':\n          return enUS;\n        case 'es':\n          return esES;\n        default:\n          return enUS;\n      }\n    }\n  }))\n  .actions(self => ({\n    changeLanguageTo(language) {\n      self.language = language;\n    }\n  }));\n\nexport default LanguageStore;\n","import { types } from 'mobx-state-tree';\n\nconst UIStore = types\n  .model('UIStore', {\n    borderRadius: types.number,\n    textColor: types.string\n  })\n  .views(self => ({}))\n  .actions(self => ({\n    changeBorderRadius(value) {\n      self.borderRadius = value;\n    },\n    changeTextColor(value) {\n      self.textColor = value;\n    }\n  }));\n\nexport default UIStore;\n","import React from 'react';\nimport { observer, inject } from 'mobx-react';\n\nconst Language = ({ language, resource }) => resource.indexOf('.') !== -1\n  ? <span>\n      {language.resource[resource.split('.')[0]][resource.split('.')[1]]}\n    </span>\n  : <span>{language.resource[resource]}</span>;\n\nexport default inject('language')(observer(Language));\n","import React from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport Language from \"../language/language\";\n\nimport \"./stylesheets/header.css\";\n\nconst Header = ({ language }) => (\n  <div id=\"Header\">\n    <div\n      className={\n        language.currentLanguage === \"es\" ? \"element current\" : \"element\"\n      }\n      onClick={() => language.changeLanguageTo(\"es\")}\n    >\n      <Language resource=\"CHANGE_SPANISH\" />\n    </div>\n    <div\n      className={\n        language.currentLanguage === \"en\" ? \"element current\" : \"element\"\n      }\n      onClick={() => language.changeLanguageTo(\"en\")}\n    >\n      <Language resource=\"CHANGE_ENGLISH\" />\n    </div>\n  </div>\n);\n\nexport default inject(\"language\")(observer(Header));\n","import styled from 'styled-components';\n\nconst Button = styled.button`\n  background: linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%);\n  border-radius: ${props => props.radius}px;\n  border: 0;\n  outline: none;\n  color: ${props => (props.color ? props.color : 'white')};\n  text-transform: uppercase;\n  padding: 10px 15px;\n  box-shadow: 0 3px 5px 2px rgba(255, 105, 135, .30);\n  transition: all 1s ease-in-out;\n  margin-bottom: 5px;\n  &:hover{\n    background: linear-gradient(45deg, #ed6482 30%, #e98049 90%);\n  }\n  &:active{\n    background: linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%);\n  }\n`;\n\nexport default Button;\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\n\nimport Language from \"../language/language\";\nimport Button from \"../button/button\";\n\n// Stylesheet Imports\nimport \"./stylesheets/user.css\";\n\nconst User = ({ user, ui }) => (\n  <div id=\"user\">\n    <div className=\"container\">\n      <div className=\"info\">\n        <div className=\"name\">\n          {user.fullName}, <small>{user.age}</small>\n        </div>\n        <div className=\"xp\">\n          <Language resource=\"XP_TITLE\" />:\n          {` `}\n          <span style={{ color: user.xp >= 1000 ? \"#FF8E53\" : \"#000000\" }}>\n            {user.xp}\n          </span>\n        </div>\n        <div className=\"description\">\n          <p>\n            <Language resource=\"APP_DESCRIPTION\" />\n          </p>\n        </div>\n      </div>\n      <div className=\"actions\">\n        <Button radius={ui.borderRadius} onClick={() => user.increaseXp(100)}>\n          <Language resource=\"ACTIONS.INCREASE_XP\" />\n        </Button>\n        <Button\n          radius={ui.borderRadius}\n          color={ui.textColor}\n          onClick={() => user.changeName(\"John\")}\n        >\n          <Language resource=\"ACTIONS.CHANGE_NAME\" />\n        </Button>\n        <Button\n          radius={ui.borderRadius}\n          color={ui.textColor}\n          onClick={() => user.changeLastName(\"Doe\")}\n        >\n          <Language resource=\"ACTIONS.CHANGE_LASTNAME\" />\n        </Button>\n        <Button\n          radius={ui.borderRadius}\n          color={ui.textColor}\n          onClick={() => ui.changeBorderRadius(50)}\n        >\n          CHANGE BORDER RADIUS: {ui.borderRadius}\n        </Button>\n      </div>\n    </div>\n  </div>\n);\n\nexport default inject(\"user\", \"ui\")(observer(User));\n","import React from \"react\";\nimport DevTools from \"mobx-react-devtools\";\n\nimport Header from \"../components/header/header\";\nimport User from \"../components/user/user\";\n\n// Import Common Stylesheets\nimport \"../stylesheets/common.css\";\n\nconst App = () => (\n  <div id=\"app\">\n    <DevTools />\n    <Header />\n    <User />\n  </div>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === \"installed\") {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log(\"New content is available; please refresh.\");\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log(\"Content is cached for offline use.\");\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error(\"Error during service worker registration:\", error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Provider } from 'mobx-react';\n// Service Worker for PWA\nimport serviceWorkerRegister from './registerServiceWorker';\n// Import our Stores Here\nimport UserStore from './stores/user';\nimport LanguageStore from './stores/language';\nimport UIStore from './stores/ui';\n\n// Import Components\nimport App from './containers/app';\n\n// Execute the ServiceWorker\nserviceWorkerRegister();\n\n// Because they're classes, we have to instantiate them here :)\nconst userStore = UserStore.create({\n  id: '1',\n  name: 'Alex',\n  lastName: 'Casillas',\n  age: 27,\n  xp: 0\n});\nconst languageStore = LanguageStore.create({ language: 'en' });\nconst uiStore = UIStore.create({ borderRadius: 3, textColor: 'white' });\n\nconst store = {\n  user: userStore,\n  language: languageStore,\n  ui: uiStore\n};\n\nconst router = (\n  <Provider {...store}>\n    <Router>\n      <Route exact path=\"/\" component={App} />\n    </Router>\n  </Provider>\n);\n\nrender(router, document.getElementById('root'));\n"],"sourceRoot":""}