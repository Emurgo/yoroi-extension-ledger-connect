{"version":3,"sources":["serviceWorker.js","stores/user.js","language/i18n/es.js","language/i18n/en.js","stores/language.js","stores/ui.js","components/language/language.jsx","components/header/header.jsx","components/button/button.jsx","components/user/user.jsx","containers/app.jsx","index.js"],"names":["Boolean","window","location","hostname","match","UserStore","types","model","id","identifier","name","string","lastName","age","number","xp","views","self","actions","changeName","changeLastName","increaseXp","amount","RESOURCES","CHANGE_SPANISH","CHANGE_ENGLISH","CHANGE_KOREAN","USER_TITLE","XP_TITLE","AGE_TITLE","APP_DESCRIPTION","ACTIONS","INCREASE_XP","CHANGE_NAME","CHANGE_LASTNAME","LanguageStore","language","enUS","esES","changeLanguageTo","UIStore","borderRadius","textColor","changeBorderRadius","value","changeTextColor","inject","observer","resource","indexOf","split","className","currentLanguage","onClick","Button","styled","button","props","radius","color","user","ui","fullName","style","App","store","create","router","exact","path","component","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b2d347c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { types } from 'mobx-state-tree';\n\n/**\n * Mobx State Tree Store\n * The store recieves 3 parameters\n *  1st one is the Store Name\n *  2nd is an object with the Props and Computed values\n *  3rd is and object with the Actions\n **/\n\nconst UserStore = types\n  .model('UserStore', {\n    id: types.identifier,\n    name: types.string,\n    lastName: types.string,\n    age: types.number,\n    xp: types.number\n  })\n  .views(self => ({\n    get fullName() {\n      return `${self.name} ${self.lastName}`;\n    }\n  }))\n  .actions(self => ({\n    changeName(name) {\n      self.name = name;\n    },\n    changeLastName(lastName) {\n      self.lastName = lastName;\n    },\n    increaseXp(amount) {\n      self.xp += amount;\n    }\n  }));\n\nexport default UserStore;\n","// SPANISH LANGUAGE RESOURCES\nconst RESOURCES = {\n  CHANGE_SPANISH: 'Cambiar a Español',\n  CHANGE_ENGLISH: 'Cambiar a Inglés',\n  CHANGE_KOREAN: 'Cambiar a Coreano',\n  USER_TITLE: 'Usuario',\n  XP_TITLE: 'Experiencia',\n  AGE_TITLE: 'Age',\n  APP_DESCRIPTION: 'React Create App con React Router y MobX e Internacionalización.',\n  ACTIONS: {\n    INCREASE_XP: 'Incrementa Puntos de Experiencia!',\n    CHANGE_NAME: 'Cambia mi nombre!',\n    CHANGE_LASTNAME: 'Cambia mi apellido!'\n  }\n};\n\nexport default RESOURCES;\n","// ENGLISH LANGUAGE RESOURCES\nconst RESOURCES = {\n  CHANGE_SPANISH: 'Change to Spanish',\n  CHANGE_ENGLISH: 'Change to English',\n  CHANGE_KOREAN: 'Change to Korean',\n  USER_TITLE: 'User',\n  XP_TITLE: 'Experience',\n  AGE_TITLE: 'Age',\n  APP_DESCRIPTION: 'React Create App with React Router and MobX and Internationalization.',\n  ACTIONS: {\n    INCREASE_XP: 'Increase Experience Points!',\n    CHANGE_NAME: 'Change My Name!',\n    CHANGE_LASTNAME: 'Change My Last Name!'\n  }\n};\n\nexport default RESOURCES;\n","import { types } from 'mobx-state-tree';\n\nimport esES from '../language/i18n/es';\nimport enUS from '../language/i18n/en';\n\nconst LanguageStore = types\n  .model('LanguageStore', {\n    language: types.string\n  })\n  .views(self => ({\n    get currentLanguage() {\n      return self.language;\n    },\n    get resource() {\n      switch (self.language) {\n        case 'en':\n          return enUS;\n        case 'es':\n          return esES;\n        default:\n          return enUS;\n      }\n    }\n  }))\n  .actions(self => ({\n    changeLanguageTo(language) {\n      self.language = language;\n    }\n  }));\n\nexport default LanguageStore;\n","import { types } from 'mobx-state-tree';\n\nconst UIStore = types\n  .model('UIStore', {\n    borderRadius: types.number,\n    textColor: types.string\n  })\n  .views(self => ({}))\n  .actions(self => ({\n    changeBorderRadius(value) {\n      self.borderRadius = value;\n    },\n    changeTextColor(value) {\n      self.textColor = value;\n    }\n  }));\n\nexport default UIStore;\n","import React from 'react';\nimport { observer, inject } from 'mobx-react';\n\nconst Language = ({ language, resource }) => resource.indexOf('.') !== -1\n  ? <span>\n      {language.resource[resource.split('.')[0]][resource.split('.')[1]]}\n    </span>\n  : <span>{language.resource[resource]}</span>;\n\nexport default inject('language')(observer(Language));\n","import React from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport Language from \"../language/language\";\n\nimport \"./stylesheets/header.css\";\n\nconst Header = ({ language }) => (\n  <div id=\"Header\">\n    <div\n      className={\n        language.currentLanguage === \"es\" ? \"element current\" : \"element\"\n      }\n      onClick={() => language.changeLanguageTo(\"es\")}\n    >\n      <Language resource=\"CHANGE_SPANISH\" />\n    </div>\n    <div\n      className={\n        language.currentLanguage === \"en\" ? \"element current\" : \"element\"\n      }\n      onClick={() => language.changeLanguageTo(\"en\")}\n    >\n      <Language resource=\"CHANGE_ENGLISH\" />\n    </div>\n  </div>\n);\n\nexport default inject(\"language\")(observer(Header));\n","import styled from 'styled-components';\n\nconst Button = styled.button`\n  background: linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%);\n  border-radius: ${props => props.radius}px;\n  border: 0;\n  outline: none;\n  color: ${props => (props.color ? props.color : 'white')};\n  text-transform: uppercase;\n  padding: 10px 15px;\n  box-shadow: 0 3px 5px 2px rgba(255, 105, 135, .30);\n  transition: all 1s ease-in-out;\n  margin-bottom: 5px;\n  &:hover{\n    background: linear-gradient(45deg, #ed6482 30%, #e98049 90%);\n  }\n  &:active{\n    background: linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%);\n  }\n`;\n\nexport default Button;\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\n\nimport Language from \"../language/language\";\nimport Button from \"../button/button\";\n\n// Stylesheet Imports\nimport \"./stylesheets/user.css\";\n\nconst User = ({ user, ui }) => (\n  <div id=\"user\">\n    <div className=\"container\">\n      <div className=\"info\">\n        <div className=\"name\">\n          {user.fullName}, <small>{user.age}</small>\n        </div>\n        <div className=\"xp\">\n          <Language resource=\"XP_TITLE\" />:\n          {` `}\n          <span style={{ color: user.xp >= 1000 ? \"#FF8E53\" : \"#000000\" }}>\n            {user.xp}\n          </span>\n        </div>\n        <div className=\"description\">\n          <p>\n            <Language resource=\"APP_DESCRIPTION\" />\n          </p>\n        </div>\n      </div>\n      <div className=\"actions\">\n        <Button radius={ui.borderRadius} onClick={() => user.increaseXp(100)}>\n          <Language resource=\"ACTIONS.INCREASE_XP\" />\n        </Button>\n        <Button\n          radius={ui.borderRadius}\n          color={ui.textColor}\n          onClick={() => user.changeName(\"John\")}\n        >\n          <Language resource=\"ACTIONS.CHANGE_NAME\" />\n        </Button>\n        <Button\n          radius={ui.borderRadius}\n          color={ui.textColor}\n          onClick={() => user.changeLastName(\"Doe\")}\n        >\n          <Language resource=\"ACTIONS.CHANGE_LASTNAME\" />\n        </Button>\n        <Button\n          radius={ui.borderRadius}\n          color={ui.textColor}\n          onClick={() => ui.changeBorderRadius(50)}\n        >\n          CHANGE BORDER RADIUS: {ui.borderRadius}\n        </Button>\n      </div>\n    </div>\n  </div>\n);\n\nexport default inject(\"user\", \"ui\")(observer(User));\n","import React from \"react\";\n\nimport Header from \"../components/header/header\";\nimport User from \"../components/user/user\";\n\n// Import Common Stylesheets\nimport \"../stylesheets/common.css\";\n\nconst App = () => (\n  <div id=\"app\">\n    <Header />\n    <User />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Provider } from 'mobx-react';\n// Service Worker for PWA\nimport * as serviceWorker from './serviceWorker';\n// Import our Stores Here\nimport UserStore from './stores/user';\nimport LanguageStore from './stores/language';\nimport UIStore from './stores/ui';\n\n// Import Components\nimport App from './containers/app';\n\n// Because they're classes, we have to instantiate them here :)\nconst userStore = UserStore.create({\n  id: '1',\n  name: 'Alex',\n  lastName: 'Casillas',\n  age: 27,\n  xp: 0\n});\nconst languageStore = LanguageStore.create({ language: 'en' });\nconst uiStore = UIStore.create({ borderRadius: 3, textColor: 'white' });\n\nconst store = {\n  user: userStore,\n  language: languageStore,\n  ui: uiStore\n};\n\nconst router = (\n  <Provider {...store}>\n    <Router>\n      <Route exact path=\"/\" component={App} />\n    </Router>\n  </Provider>\n);\n\nrender(router, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}